package com.compiler.lexer;

import java.util.ArrayList;
import java.util.List;
import java.util.Set;

import com.compiler.lexer.dfa.DFA;
import com.compiler.lexer.dfa.DfaState;
import com.compiler.lexer.nfa.NFA;
import com.compiler.lexer.nfa.State;
import com.compiler.lexer.regex.RegexParser;

public class Tokenizer {
    private final DFA dfa;

    public Tokenizer(List<TokenRule> rules, Set<Character> alphabet) {
        State startState = new State();
        RegexParser parser = new RegexParser();

        for (TokenRule rule : rules) {
            NFA nfa = parser.parse(rule.getRegex());
            nfa.getEndState().setTokenType(rule.getTokenType());
            startState.addEpsilonTransition(nfa.getStartState());
        }

        // NFA combinado
        NFA combinedNfa = new NFA(startState, new State());
        this.dfa = NfaToDfaConverter.convertNfaToDfa(combinedNfa, alphabet);
    }

    public List<Token> tokenize(String input) {
        List<Token> tokens = new ArrayList<>();
        int index = 0;

        while (index < input.length()) {
            DfaState currentState = dfa.startState;
            DfaState lastFinalState = null;
            int lastFinalIndex = -1;
            int currentIndex = index;

            while (currentIndex < input.length()) {
                char c = input.charAt(currentIndex);
                currentState = currentState.getTransition(c);
                if (currentState == null) break;
                if (currentState.isFinal()) {
                    lastFinalState = currentState;
                    lastFinalIndex = currentIndex;
                }
                currentIndex++;
            }

            if (lastFinalState == null) {
                throw new RuntimeException("Invalid token at index " + index);
            }

            String lexeme = input.substring(index, lastFinalIndex + 1);
            tokens.add(new Token(lastFinalState.getTokenType(), lexeme));
            index = lastFinalIndex + 1;
        }

        return tokens;
    }
}
